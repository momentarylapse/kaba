/*
 * Inline.h
 *
 *  Created on: May 9, 2021
 *      Author: michi
 */

#pragma once

namespace kaba {

enum class InlineID {
	NONE = -1,
	FLOAT32_TO_INT32,
	FLOAT32_TO_FLOAT64,
	FLOAT64_TO_FLOAT32,
	INT32_TO_FLOAT32,
	INT32_TO_INT64,
	INT64_TO_INT32,
	INT32_TO_INT8,
	INT8_TO_INT32,
	POINTER_TO_BOOL,
	COMPLEX_SET,
	VECTOR_SET,
	RECT_SET,
	COLOR_SET,

	POINTER_ASSIGN,
	POINTER_EQUAL,
	POINTER_NOT_EQUAL,

	INT8_ASSIGN,
	INT8_EQUAL,
	INT8_NOT_EQUAL,
	INT8_GREATER,
	INT8_GREATER_EQUAL,
	INT8_SMALLER,
	INT8_SMALLER_EQUAL,
	INT8_ADD,
	INT8_ADD_ASSIGN,
	INT8_SUBTRACT,
	INT8_SUBTRACT_ASSIGN,
	INT8_AND,
	INT8_OR,
	INT8_NEGATIVE,

	BOOL_ASSIGN,
	BOOL_EQUAL,
	BOOL_NOT_EQUAL,
	BOOL_AND,
	BOOL_OR,
	BOOL_NOT,

	INT16_TO_INT32,
	INT16_ASSIGN_INT32,

	INT32_ASSIGN,
	INT32_ADD,
	INT32_ADD_ASSIGN,
	INT32_SUBTRACT,
	INT32_SUBTRACT_ASSIGN,
	INT32_MULTIPLY,
	INT32_MULTIPLY_ASSIGN,
	INT32_DIVIDE,
	INT32_DIVIDE_ASSIGN,
	INT32_MODULO,
	INT32_EQUAL,
	INT32_NOT_EQUAL,
	INT32_GREATER,
	INT32_GREATER_EQUAL,
	INT32_SMALLER,
	INT32_SMALLER_EQUAL,
	INT32_AND,
	INT32_OR,
	INT32_SHIFT_RIGHT,
	INT32_SHIFT_LEFT,
	INT32_NEGATIVE,
	INT32_INCREASE,
	INT32_DECREASE,

	INT64_ASSIGN,
	INT64_ADD,
	INT64_ADD_INT32,
	INT64_ADD_ASSIGN,
	INT64_SUBTRACT,
	INT64_SUBTRACT_ASSIGN,
	INT64_MULTIPLY,
	INT64_MULTIPLY_ASSIGN,
	INT64_DIVIDE,
	INT64_DIVIDE_ASSIGN,
	INT64_MODULO,
	INT64_EQUAL,
	INT64_NOT_EQUAL,
	INT64_GREATER,
	INT64_GREATER_EQUAL,
	INT64_SMALLER,
	INT64_SMALLER_EQUAL,
	INT64_AND,
	INT64_OR,
	INT64_SHIFT_RIGHT,
	INT64_SHIFT_LEFT,
	INT64_NEGATIVE,
	INT64_INCREASE,
	INT64_DECREASE,

	FLOAT32_ASSIGN,
	FLOAT32_ADD,
	FLOAT32_ADD_ASSIGN,
	FLOAT32_SUBTARCT,
	FLOAT32_SUBTRACT_ASSIGN,
	FLOAT32_MULTIPLY,
	FLOAT32_MULTIPLY_ASSIGN,
	FLOAT32_DIVIDE,
	FLOAT32_DIVIDE_ASSIGN,
	FLOAT32_EQUAL,
	FLOAT32_NOT_EQUAL,
	FLOAT32_GREATER,
	FLOAT32_GREATER_EQUAL,
	FLOAT32_SMALLER,
	FLOAT32_SMALLER_EQUAL,
	FLOAT32_NEGATIVE,

	FLOAT64_ASSIGN,
	FLOAT64_ADD,
	FLOAT64_ADD_ASSIGN,
	FLOAT64_SUBTRACT,
	FLOAT64_SUBTRACT_ASSIGN,
	FLOAT64_MULTIPLY,
	FLOAT64_MULTIPLY_ASSIGN,
	FLOAT64_DIVIDE,
	FLOAT64_DIVIDE_ASSIGN,
	FLOAT64_EQUAL,
	FLOAT64_NOT_EQUAL,
	FLOAT64_GREATER,
	FLOAT64_GREATER_EQUAL,
	FLOAT64_SMALLER,
	FLOAT64_SMALLER_EQUAL,
	FLOAT64_NEGATIVE,

//	COMPLEX_ASSIGN,
	VEC2_ADD,
	VEC2_ADD_ASSIGN,
	VEC2_SUBTRACT,
	VEC2_SUBTARCT_ASSIGN,
	VEC2_MULTIPLY_SV,
	VEC2_MULTIPLY_VS,
	VEC2_MULTIPLY_ASSIGN,
	VEC2_DIVIDE_VS,
	VEC2_DIVIDE_ASSIGN,
	VEC2_NEGATIVE,

	COMPLEX_MULTIPLY,
	COMPLEX_MULTIPLY_ASSIGN,
	COMPLEX_DIVIDE,
	COMPLEX_DIVIDE_ASSIGN,

	CHUNK_ASSIGN,
	CHUNK_EQUAL,
	CHUNK_NOT_EQUAL,
	PASSTHROUGH,

	VEC3_ADD,
	VEC3_ADD_ASSIGN,
	VEC3_SUBTRACT,
	VEC3_SUBTARCT_ASSIGN,
	VEC3_MULTIPLY_VV,
	VEC3_MULTIPLY_VF,
	VEC3_MULTIPLY_FV,
	VEC3_MULTIPLY_ASSIGN,
	VEC3_DIVIDE_VF,
	VEC3_DIVIDE_ASSIGN,
	VEC3_NEGATIVE,

	SHARED_POINTER_INIT,
};

}
