use yrenderer.*
use glfw
use time
use os

let W = 800
let H = 600


func main()
	glfw.init(["vulkan"])
	var w = new glfw.Window("test", W, H)
	glfw.make_context_current(w)
	
	var ctx = api_init_glfw(w.win)
	ctx.create_managers("", os.app_directory_dynamic | "packages/yrenderer/shader", "")
	
	var wr = new WindowRenderer(ctx, w.win)
	
	var hdr = new HDRResolver(ctx, W, H)
	hdr.exposure = 0.2
#	hdr.bloom_factor = 10
	
	var scene_view = new SceneView()
	var sr = new SceneRenderer(ctx, 1, weak(scene_view))
	sr.background_color = [0.125,0.125,0.125,1]
	
	wr.add_child(weak(hdr))
	hdr.add_child(weak(sr))
	
	
	var cube = new shared CubeEmitter(ctx)
	cube.material.emission = [0,0,0.7,1]
	sr.add_emitter(cube)
	
	var light: YLight
	light.init([300,0,300,1], 100, -1)
	light.pos = [0,8,-10]
	
	
#	ctx.default_shader = "default.shader"
	ctx.load_shader_module("module-basic-interface.shader")
	ctx.load_shader_module("module-basic-data.shader")
	let light_sources = "default"
	ctx.load_shader_module("module-light-sources-{{light_sources}}.shader")
	let shadows_method = "pcf-hardening"
	ctx.load_shader_module("module-shadows-{{shadows_method}}.shader")
	let lighting_method = "pbr"
	ctx.load_shader_module("module-lighting-{{lighting_method}}.shader")
	ctx.load_shader_module("module-vertex-default.shader")
	ctx.load_shader_module("module-vertex-animated.shader")
	ctx.load_shader_module("module-vertex-instanced.shader")
	ctx.load_shader_module("module-vertex-lines.shader")
	ctx.load_shader_module("module-vertex-points.shader")
	ctx.load_shader_module("module-vertex-fx.shader")
	ctx.load_shader_module("module-geometry-lines.shader")
	ctx.load_shader_module("module-geometry-points.shader")
	ctx.load_shader_module("forward/module-surface.shader")
	
	var t = 0.0
	
	while not w.should_close()
		glfw.poll_events()
		if !wr.start_frame()
			return
		let params = wr.create_params(1.3)
		
		cube.matrix = mat4.rotation([t*0.4543,t*0.743,0])
		
		sr.set_view(params, (vec3(0,0,-7), quaternion.ID, pi/4, 0.1, 1000))
		scene_view.choose_lights([&light])
		
	#	hdr.exposure = exp(sin(t)*2-0.8)
		cube.material.emission.g = (1 + sin(t))*0.5
		wr.prepare(params)
		wr.draw(params)
		wr.end_frame(params)
		time.sleep(0.01)
		t += 0.01
	glfw.end()


