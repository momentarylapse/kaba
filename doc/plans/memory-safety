== problems to solve ==

* "aliasing"/overlap read/write parameter

f(out a,a)

* pointer bleeding/keeping reference
  -> to self
  -> to return
  -> to global
  -> to out param? ...forbidden?


== suggestion ==

func f(ref a: int[], ...) -> int[]
	return a[...]



func selfref f() -> ...
func ref f() -> ...

	ownership: self -> return
	self=mut => return=mut

func f(ref p: ...) -> ...

	ownership: param -> return
	param=mut => return=mut

func f(selfref p: ...)

	ownership: param -> self
	...why do we care...?




func mut/ref f()

	... describes "self"
	"mut return" does not make sense otherwise

