
use hui
use time

func extern _glfwInit() -> i32
func extern _glfwVulkanSupported() -> i32
func extern _glfwCreateWindow(width: i32, height: i32, title: u8*, monitor: void*, share: void*) -> void*
func extern _glfwWindowShouldClose(window: void*) -> i32
func extern _glfwSetWindowUserPointer(window: void*, p: void*)
func extern _glfwGetWindowUserPointer(window: void*) -> void&
func extern _glfwSetKeyCallback(window: void*, f: void*) -> void*
func extern _glfwSetCursorPosCallback(window: void*, f: void*) -> void*
func extern _glfwSetMouseButtonCallback(window: void*, f: void*) -> void*
func extern _glfwGetCursorPos(window: void*, x: f64*, y: f64*)
func extern _glfwWindowHint(hint: i32, value: i32)
func extern _glfwPollEvents()
func extern _glfwTerminate()
func extern _glfwJoystickPresent(j: i32) -> i32
func extern _glfwJoystickIsGamepad(j: i32) -> i32
func extern _glfwGetJoystickName(j: i32) -> u8[0]*
func extern _glfwGetGamepadName(j: i32) -> u8[0]*
func extern _glfwGetGamepadState(j: i32, p: void*) -> i32

let GLFW_CLIENT_API = 0x00022001
let GLFW_NO_API = 0
let GLFW_RESIZABLE = 0x00020003

func init(opts: string[])
	_glfwInit()
	if "vulkan" in opts
		print("VULKAN!!!!")
		if _glfwVulkanSupported() == 0
			raise(new Exception("glfw: vulkan not supported"))
		_glfwWindowHint(GLFW_CLIENT_API, GLFW_NO_API)
		_glfwWindowHint(GLFW_RESIZABLE, 0)

func end()
	_glfwTerminate()

func cp2s(_p: u8[0]*) -> string
	for p in _p
		var s: string
		for i in 0:256
			if p[i] == 0
				break
			s.add(p[i])
		return s
	else
		return ""

func _get_key(k: int) -> int
	if k >= 65 and k < 91
		return k - 65 + hui.KEY_A
	if k == 32
		return hui.KEY_SPACE
	if k == 256
		return hui.KEY_ESCAPE
	if k == 257
		return hui.KEY_RETURN
	if k == 258
		return hui.KEY_TAB
	if k == 259
		return hui.KEY_BACKSPACE
	if k == 262
		return hui.KEY_RIGHT
	if k == 263
		return hui.KEY_LEFT
	if k == 264
		return hui.KEY_DOWN
	if k == 265
		return hui.KEY_UP
	return -1
	

func _on_key(w: void*, a: i32, b: i32, c: i32, d: i32)
#	print("ON KEY   {{a}} {{b}} {{c}} {{d}}")
	var win = _glfwGetWindowUserPointer(w) as Window&
	var k = _get_key(a)
	if k < 0
		return
	win.input.key[k] = (c > 0)
	if c > 0
		win.on_key_down(k)

func _on_button(w: void*, a: i32, action: i32, c: i32)
#	print("ON BUTTON   {{a}} {{action}} {{c}}")
	var win = _glfwGetWindowUserPointer(w) as Window&
	if action == 1
		if a == 0
			win.input.button[0] = true
			win.on_left_button_down()
		else if a == 1
			win.input.button[1] = true
			win.on_right_button_down()
	else if action == 0
		if a == 0
			win.input.button[0] = false
			win.on_left_button_up()
		else if a == 1
			win.input.button[1] = false
			win.on_right_button_up()

func _on_cursor(w: void*, xx: f64, yy: f64)
	var x = float(xx)
	var y = float(yy)
#	print("ON CURSOR   {{x}}  {{y}}")
	var win = _glfwGetWindowUserPointer(w) as Window&
	win.input.dx = x - win.input.x
	win.input.dy = y - win.input.y
	win.input.x = x
	win.input.y = y
	win.on_mouse_move()#x, y)


class Window
	var win: void*
	class Input
		var button: bool[3]
		var key: bool[256]
		var x, y, dx, dy: f32
		func __init__()
			for mut b in button
				b = false
			for mut k in key
				k = false
	var input: Input
	func __init__(title: string, w: i32, h: i32)
		var _title = title + "\x00"
		win = _glfwCreateWindow(w, h, &_title[0], nil, nil)
		_glfwSetWindowUserPointer(win, &self)
		_glfwSetKeyCallback(win, raw_function_pointer(_on_key))
		_glfwSetCursorPosCallback(win, raw_function_pointer(_on_cursor))
		_glfwSetMouseButtonCallback(win, raw_function_pointer(_on_button))
	func __init__(ww: void*)
		win = ww
		_glfwSetWindowUserPointer(win, &self)
		_glfwSetKeyCallback(win, raw_function_pointer(_on_key))
		_glfwSetCursorPosCallback(win, raw_function_pointer(_on_cursor))
		_glfwSetMouseButtonCallback(win, raw_function_pointer(_on_button))
	func run()
		while _glfwWindowShouldClose(win) == 0
			_glfwPollEvents()
			on_idle()
	func virtual on_idle()
	func get_mouse() -> complex
		var xx, yy: f64
		_glfwGetCursorPos(win, &xx, &yy)
		return complex(f32(xx), f32(yy))
	func virtual on_key_down(key: i32)
		#print("key {{key}}")
	func virtual on_mouse_move()
		#print("ON CURSOR   {{get_mouse()}}")
	func virtual on_left_button_down()
		#print("LBD")
	func virtual on_left_button_up()
		#print("LBU")
	func virtual on_right_button_down()
		#print("RBD")
	func virtual on_right_button_up()
		#print("RBU")
	func key(k: i32) -> bool
		if k < 0 or k >= 256
			return false
		return input.key[k]


struct GamepadState
	var _buttons: bool[16]
	var axes: f32[6]
	func __init__()
		for mut b in _buttons
			b = false
		for mut a in axes
			a = 0

struct Gamepad extends GamepadState as shared
	enum Button
		CROSS
		CIRCLE
		SQUARE
		TRIANGLE
		L1
		R1
		OPTIONS
		SHARE
		PS
		L3
		R3
		UP
		RIGHT
		DOWN
		LEFT
		
	var state_prev: GamepadState
	var index: i32
	var deadzone: f32
	func __init__(i: i32)
		index = i
		deadzone = 0.05
	
	func present() -> bool
		return _glfwJoystickIsGamepad(index) == 1
	
	func mut update()
		state_prev = self
		_glfwGetGamepadState(index, &self)
		for mut a in axes
			if abs(a) < deadzone
				a = 0
			else if a > 0
				a = (a - deadzone) / (1 - deadzone)
			else
				a = (a + deadzone) / (1 - deadzone)
	
	func click(b: Button) -> bool
		return _buttons[i32(b)] and not state_prev._buttons[i32(b)]
	func button(b: Button) -> bool
		return _buttons[i32(b)]
		
	
	func static get(index: int) -> shared[Gamepad]
		return new Gamepad(index)

